import 'dart:collection';
import 'dart:math';

// Helper for unit conversions
const double inchesToCm = 2.54;

/// Represents a single row of data from the raw CSV table.
/// This row maps a specific child's current height to estimated final heights
/// across various skeletal ages.
class ChildGrowthDataRow {
  /// The child's current height in inches that this row represents (from the first column).
  final int childCurrentHeightInches;

  /// A map where the key is the skeletal age string (e.g., "7-0")
  /// and the value is the estimated final height in inches for that skeletal age.
  final SplayTreeMap<String, double> estimatedFinalHeightsBySkeletalAge;

  ChildGrowthDataRow({
    required this.childCurrentHeightInches,
    required Map<String, double> estimatedFinalHeightsBySkeletalAge,
  }) : estimatedFinalHeightsBySkeletalAge = SplayTreeMap<String, double>.from(estimatedFinalHeightsBySkeletalAge);

  /// Factory constructor for parsing a single CSV row (data row)
  factory ChildGrowthDataRow.fromCsvRow(List<String> row, List<String> skeletalAgeHeaders) {
    if (row.isEmpty) {
      throw ArgumentError('CSV row cannot be empty.');
    }

    final int? currentHeight = int.tryParse(row[0].trim());
    if (currentHeight == null) {
      throw FormatException('Invalid child current height format in CSV row: "${row[0].trim()}"');
    }

    final Map<String, double> finalHeights = {};
    for (int i = 1; i < row.length; i++) {
      if (i - 1 < skeletalAgeHeaders.length) {
        final String skeletalAgeStr = skeletalAgeHeaders[i - 1];
        final String finalHeightString = row[i].trim();

        if (finalHeightString.isNotEmpty) {
          final double? finalHeight = double.tryParse(finalHeightString);
          if (finalHeight != null) {
            finalHeights[skeletalAgeStr] = finalHeight;
          }
        }
      }
    }

    return ChildGrowthDataRow(
      childCurrentHeightInches: currentHeight,
      estimatedFinalHeightsBySkeletalAge: finalHeights,
    );
  }

  /// Merges the estimated final heights from another ChildGrowthDataRow into this one.
  /// Used when combining data from different CSV blocks for the same current height.
  ChildGrowthDataRow merge(ChildGrowthDataRow other) {
    if (childCurrentHeightInches != other.childCurrentHeightInches) {
      throw ArgumentError('Cannot merge ChildGrowthDataRow for different current heights.');
    }
    final mergedFinalHeights = Map<String, double>.from(estimatedFinalHeightsBySkeletalAge);
    mergedFinalHeights.addAll(other.estimatedFinalHeightsBySkeletalAge); // Merges or overrides existing keys
    return ChildGrowthDataRow(
      childCurrentHeightInches: childCurrentHeightInches,
      estimatedFinalHeightsBySkeletalAge: mergedFinalHeights,
    );
  }

  @override
  String toString() {
    final formattedEntries = estimatedFinalHeightsBySkeletalAge.entries
        .map((e) => '${e.key}: ${e.value.toStringAsFixed(1)} in')
        .join(',\n    ');
    return 'ChildGrowthDataRow(\n'
        '  Child Current Height: $childCurrentHeightInches inches,\n'
        '  Estimated Final Heights by Skeletal Age:\n    {$formattedEntries}\n'
        ')';
  }
}

/// Helper function to convert "Years-Months" string to decimal years.
double _calculateDecimalSkeletalAge(String skeletalAgeString) {
  final parts = skeletalAgeString.split('-');
  if (parts.length == 1) {
    // Handle cases like "18" if they appear, interpreting as "18-0"
    return double.tryParse(parts[0]) ?? 0.0;
  }
  final int years = int.tryParse(parts[0]) ?? 0;
  final int months = int.tryParse(parts[1]) ?? 0;
  return years + (months / 12.0);
}

/// Represents the result of a single height prediction.
class PredictedFinalHeightData {
  final double childCurrentHeightInches;
  final String childSkeletalAgeString;
  final double childActualAgeDecimalYears;
  final String sex; // e.g., 'boy', 'girl'
  final String skeletalAgeDifferenceCategory; // e.g., 'normal', 'delayed_gt_1yr', 'advanced_gt_1yr'

  final double skeletalAgeDecimalYears;
  final double childCurrentHeightCm;
  final double predictedFinalHeightInches;
  final double predictedFinalHeightCm;

  PredictedFinalHeightData({
    required this.childCurrentHeightInches,
    required this.childSkeletalAgeString,
    required this.childActualAgeDecimalYears,
    required this.sex,
    required this.skeletalAgeDifferenceCategory,
    required this.skeletalAgeDecimalYears,
    required this.childCurrentHeightCm,
    required this.predictedFinalHeightInches,
    required this.predictedFinalHeightCm,
  });

  @override
  String toString() {
    return 'PredictedFinalHeightData(\n'
        '  Child Current Height: ${childCurrentHeightInches.toStringAsFixed(1)} in (${childCurrentHeightCm.toStringAsFixed(1)} cm)\n'
        '  Skeletal Age: $childSkeletalAgeString (${skeletalAgeDecimalYears.toStringAsFixed(2)} yrs)\n'
        '  Actual Age: ${childActualAgeDecimalYears.toStringAsFixed(2)} yrs\n'
        '  Sex: $sex\n'
        '  Skeletal Age Category: $skeletalAgeDifferenceCategory\n'
        '  Predicted Final Height: ${predictedFinalHeightInches.toStringAsFixed(1)} in (${predictedFinalHeightCm.toStringAsFixed(1)} cm)\n'
        ')';
  }
}

// --- Your Dataset Definitions ---
// Replace with your actual CSV data
const String _boyNormalGrowthCsv = """
Skeletal Age,7-0,7-3,7-6,7-9,8-0,8-3,8-6,8-9,9-0,9-3,9-6,9-9,10,10-3,10-6,10-9,11,11-3,11-6,11-9,12-0,12-3,12-6,12-9,13-0,13-3,13-6,13-9,14-0,14-3,14-6,14-9,15-0,15-3,15-6,15-9,16-0,16-3,16-6,16-9,17-0,17-3,17-6,17-9,18-0,18-3,18-6
Mature Height,,,,,,,,,,,,,,,,,,,,,,,,,87.6,89,90.2,91.4,92.7,93.8,94.8,95.8,96.8,97.3,97.6,98,98.2,98.5,98.7,98.9,99.1,99.3,99.4,99.5,99.6,99.8,100
Ht. (inches),,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
42,60.4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
43,61.9,61.3,60.6,60.1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
44,63.3,62.7,62.1,61.5,60.9,60.2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
45,64.7,64.1,63.5,62.8,62.2,61.6,60.9,60.3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
46,66.2,65.5,64.9,64.2,63.6,62.9,62.2,61.7,61.2,60.4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
47,67.6,67,66.3,65.6,65,64.3,63.6,63,62.5,61.8,61.1,60.5,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
48,69.1,68.4,67.7,67,66.4,65.7,65,64.3,63.8,63.1,62.4,61.8,61.2,60.7,60.4,60,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
49,70.5,69.8,69.1,68.4,67.8,67,66.3,65.7,65.2,64.4,63.7,63.1,62.5,61.9,61.6,61.3,60.9,60.3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
50,71.9,71.2,70.5,69.8,69.2,68.4,67.7,67,66.5,65.7,65,64.4,63.8,63.2,62.9,62.5,62.2,61.6,61.1,60.5,,,,,,,,,,,,,,,,,,,,,,,,,,,
51,73.4,72.6,71.9,71.2,70.5,69.8,69,68.4,67.8,67,66.3,65.6,65.1,64.5,64.2,63.8,63.4,62.8,62.3,61.7,61.1,60.5,59.8,,,,,,,,,,,,,,,,,,,,,,,,
52,74.8,74.1,73.3,72.6,71.9,71.1,70.4,69.7,69.1,68.3,67.6,66.9,66.3,65.7,65.4,65,64.7,64,63.6,62.9,62.3,61.7,61,60.3,,,,,,,,,,,,,,,,,,,,,,,
53,76.3,75.5,74.8,74,73.3,72.5,71.7,71,70.5,69.6,68.9,68.2,67.6,67,66.7,66.3,65.9,65.3,64.8,64.1,63.5,62.9,62.1,61.4,60.5,,,,,,,,,,,,,,,,,,,,,,
54,77.7,76.9,76.2,75.4,74.7,73.9,73.1,72.4,71.8,71,70.2,69.5,68.9,68.3,67.9,67.5,67.2,66.5,66,65.3,64.7,64.1,63.3,62.6,61.6,60.7,,,,,,,,,,,,,,,,,,,,,
55,79.1,78.3,77.6,76.8,76.1,75.2,74.4,73.7,73.1,72.3,71.5,70.8,70.2,69.5,69.2,68.8,68.4,67.7,67.2,66.5,65.9,65.2,64.5,63.7,62.8,61.8,61,60.2,,,,,,,,,,,,,,,,,,,
56,80.6,79.8,79,78.2,77.5,76.6,75.8,75.1,74.5,73.6,72.8,72.1,71.4,70.8,70.4,70,69.7,69,68.5,67.7,67.1,66.4,65.6,64.9,63.9,62.9,62.1,61.3,60.4,,,,,,,,,,,,,,,,,,
57,,,80.4,79.6,78.8,78,77.1,76.4,75.8,74.9,74.1,73.4,72.7,72.1,71.7,71.3,70.9,70.2,69.7,68.9,68.3,67.6,66.8,66,65.1,64,63.2,62.4,61.5,60.8,60.1,,,,,,,,,,,,,,,,
58,,,,80.2,79.3,78.5,77.7,77.1,76.2,75.4,74.6,74,73.3,73,72.5,72.1,71.4,70.9,70.1,69.5,68.8,68,67.2,,66.2,65.2,64.3,63.5,62.6,61.8,61.2,60.5,,,,,,,,,,,,,,,
59,,,,,,80.7,79.8,79.1,78.5,77.5,76.7,75.9,75.3,74.6,74.2,73.8,73.4,72.7,72.1,71.3,70.7,70,69.2,68.4,67.4,66.3,65.4,64.6,63.6,62.9,62.2,61.6,61,60.6,60.5,60.2,60.1,,,,,,,,,,
60,,,,,,,,80.4,79.8,78.8,78,77.2,76.5,75.9,75.5,75,74.6,73.9,73.3,72.6,71.9,71.2,70.5,69.7,68.5,67.4,66.5,65.6,64.7,64,63.3,62.6,62,61.7,61.5,61.2,61.1,60.9,60.8,60.7,60.5,60.4,60.4,60.3,60.2,60.1,60
61,,,,,,,,,,80.2,79.3,78.5,77.8,77.1,76.7,76.3,75.9,75.1,74.6,73.8,73.1,72.4,71.5,70.7,69.6,68.5,67.6,66.7,65.8,65,64.3,63.7,63,62.7,62.5,62.2,62.1,61.9,61.8,61.7,61.6,61.4,61.4,61.3,61.2,61.1,61
62,,,,,,,,,,,80.6,79.8,79.1,78.4,78,77.5,77.1,76.4,75.8,75,74.3,73.5,72.7,71.8,70.8,69.7,68.7,67.8,66.9,66.1,65.4,64.7,64.1,63.7,63.5,63.3,63.1,62.9,62.8,62.7,62.6,62.4,62.4,62.3,62.2,62.1,62
63,,,,,,,,,,,,,80.4,79.6,79.2,78.8,78.4,77.6,77,76.2,75.5,74.7,73.9,73,71.9,70.8,69.8,68.9,68,67.2,66.5,65.8,65.1,64.7,64.5,64.3,64.2,64,63.9,63.7,63.6,63.4,63.4,63.3,63.3,63.1,63
64,,,,,,,,,,,,,,80.9,80.5,80,79.6,78.8,78.2,77.4,76.7,75.9,75,74.2,73.1,71.9,71,70,69,68.2,67.5,66.8,66.1,65.8,65.6,65.3,65.2,65,64.8,64.7,64.6,64.4,64.4,64.3,64.1,64,63.9
65,,,,,,,,,,,,,,,,,80.8,80,79.5,78.6,77.9,77.1,76.2,75.3,74.2,73,72.1,71.1,70.1,69.3,68.6,67.8,67.2,66.8,66.6,66.3,66.2,66,65.9,65.7,65.6,65.5,65.5,65.3,65.3,65.1,65
66,,,,,,,,,,,,,,,,,,,80.7,79.8,79.1,78.3,77.4,76.5,75.3,74.2,73.2,72.2,71.2,70.4,69.6,68.9,68.2,67.8,67.6,67.3,67.2,67,66.9,66.7,66.6,66.5,66.4,66.3,66.3,66.1,66
67,,,,,,,,,,,,,,,,,,,,,80.3,79.5,78.5,77.6,76.5,75.3,74.3,73.3,72.3,71.4,70.7,69.9,69.2,68.9,68.6,68.4,68.2,68,67.9,67.7,67.6,67.5,67.4,67.3,67.3,67.1,67
68,,,,,,,,,,,,,,,,,,,,,,80.7,79.7,78.8,77.6,76.4,75.4,74.4,73.4,72.5,71.7,71,70.3,69.9,69.7,69.4,69.2,69,68.9,68.8,68.6,68.5,68.4,68.3,68.3,68.1,68
69,,,,,,,,,,,,,,,,,,,,,,,80.9,80,78.8,77.5,76.5,75.5,74.4,73.6,72.8,72,71.3,70.9,70.7,70.4,70.3,70,69.9,69.8,69.6,69.5,69.4,69.3,69.3,69.1,69
70,,,,,,,,,,,,,,,,,,,,,,,,,79.9,78.7,77.7,76.6,75.5,74.6,73.8,73.1,72.3,71.9,71.7,71.4,71.3,71.1,70.9,70.8,70.6,70.5,70.4,70.4,70.3,70.1,70
71,,,,,,,,,,,,,,,,,,,,,,,,,,79.8,78.7,77.7,76.6,75.7,74.9,74.1,73.4,73,72.7,72.4,72.3,72.1,71.9,71.8,71.6,71.5,71.4,71.3,71.3,71.1,71
72,,,,,,,,,,,,,,,,,,,,,,,,,,80.9,79.8,78.8,77.7,76.8,75.9,75.2,74.4,74,73.8,73.5,73.3,73.1,73,72.8,72.7,72.5,72.4,72.4,72.3,72.1,72
73,,,,,,,,,,,,,,,,,,,,,,,,,,,80.9,79.9,78.7,78.8,77.8,77,76.2,75.4,75,74.5,74.3,74.1,74,73.8,73.7,73.5,73.4,73.4,73.3,73.1,73
74,,,,,,,,,,,,,,,,,,,,,,,,,,,,,79.8,78.9,78.1,77.2,76.4,76,75.8,75.5,75.4,75.1,75,74.8,74.7,74.5,74.4,74.4,74.3,74.1,74
75,,,,,,,,,,,,,,,,,,,,,,,,,,,,,80.9,80,79.1,78.3,77.5,77.1,76.8,76.5,76.4,76.1,76,75.8,75.7,75.5,75.4,75.4,75.3,75.2,75
76,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,80.2,79.3,78.5,78.1,77.9,77.6,77.4,77.2,77,76.8,76.7,76.5,76.5,76.4,76.3,76.2,76
77,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,80.4,79.5,79.1,78.9,78.6,78.4,78.2,78,77.9,77.7,77.5,77.5,77.4,77.3,77.2,77
78,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,80.6,80.2,79.9,79.6,79.4,79.2,79,78.9,78.7,78.5,78.5,78.4,78.3,78.2,78
""";

const String _boyDelayedGrowthCsv = """
Skeletal Age,6-0,6-3,6-6,6-9,7-0,7-3,7-6,7-9,8-0,8-3,8-6,8-9,9-0,9-3,9-6,9-9,10-0,10-3,10-6,10-9,11-0,11-3,11-6,11-9,12-0,12-3,12-6,12-9,13-0
% of Mature Height,68,69,70,70.9,71.8,72.8,73.8,74.7,75.6,76.5,77.3,77.9,78.6,79.4,80,80.7,81.2,81.6,81.9,82.1,82.3,82.7,83.2,83.9,84.5,85.2,86,86.9,88
Mature Height,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Ht. (inches),,,,,,,,,,,,,,,,,,,,,,,,,,,,,
41,60.3,,,,,,,,,,,,,,,,,,,,,,,,,,,,
42,61.8,60.9,60,,,,,,,,,,,,,,,,,,,,,,,,,,
43,63.2,62.3,61.4,60.6,,,,,,,,,,,,,,,,,,,,,,,,,
44,64.7,63.8,62.9,62.1,61.3,60.4,,,,,,,,,,,,,,,,,,,,,,,
45,66.2,65.2,64.3,63.5,62.7,61.8,61,60.2,,,,,,,,,,,,,,,,,,,,,
46,67.6,66.7,65.7,64.9,64.1,63.2,62.3,61.6,60.8,,,,,,,,,,,,,,,,,,,,
47,69.1,68.1,67.1,66.3,65.5,64.6,63.7,62.9,62.2,60.1,,,,,,,,,,,,,,,,,,,
48,70.6,69.6,68.6,67.7,66.9,65.9,65,64.3,63.5,61.4,60.8,60.3,,,,,,,,,,,,,,,,,
49,72.1,71,70,69.1,68.3,67.3,66.4,65.6,64.8,62.7,62.1,61.6,61.1,60.5,60,,,,,,,,,,,,,,
50,73.5,72.5,71.4,70.5,69.6,68.7,67.8,66.9,66.1,64.1,63.4,62.9,62.3,61.7,61.3,60.7,60.3,60,,,,,,,,,,,
51,75,73.9,72.9,71.9,71,70.1,69.3,68.5,67.5,65.4,64.7,64.2,63.6,63,62.5,62,61.6,61.3,61.1,60.9,60.8,60.5,60.1,,,,,,
52,76.5,75.4,74.3,73.3,72.4,71.4,70.5,69.8,68.8,66.7,66,65.5,64.9,64.2,63.8,63.2,62.8,62.5,62.3,62.1,62,61.7,61.3,60.8,60.4,,,,
53,77.9,76.8,75.7,74.8,73.8,72.8,71.8,71,70.1,68,67.3,66.8,66.2,65.5,65,64.4,64,63.7,63.5,63.3,63.2,62.9,62.5,62,61.5,61,60.5,,
54,79.4,78.3,77.1,76.2,75.2,74.2,73.2,72.3,71.4,69.3,68.6,68,67.4,66.8,66.3,65.7,65.3,65,64.7,64.4,64.1,64.1,63.7,63.2,62.7,62.2,61.6,61,60.2
55,80.9,79.7,78.6,77.6,76.6,75.5,74.5,73.6,72.8,70.6,69.9,69.3,68.7,68,67.5,66.9,66.5,66.2,65.9,65.8,65.6,65.3,64.9,64.4,63.9,63.4,62.8,62.1,61.4
56,,,80,79,78,76.9,75.9,75,74.1,71.9,71.2,70.6,70,69.3,68.8,68.2,67.7,67.4,67.2,67,66.8,66.5,66.1,65.6,65.1,64.6,64,63.3,62.5
57,,,,80.4,79.4,78.3,77.2,76.3,75.4,73.2,72.4,71.9,71.2,70.5,70,69.4,69,68.6,68.4,68.2,68,67.7,67.3,66.7,66.3,65.7,65.1,64.4,63.6
58,,,,,80.8,79.7,78.6,78.8,76.7,74.5,73.7,73.2,72.5,71.8,71.3,70.6,70.2,69.9,69.6,69.4,69.3,68.9,68.5,67.9,67.5,66.9,66.3,65.6,64.8
59,,,,,,,79.9,79,78,75.8,75,74.5,73.8,73,72.5,72.5,71.4,71.1,71.1,70.8,70.5,70.5,70.1,69.7,69.1,68.6,67.4,67.4,65.9
60,,,,,,,,80.3,79.4,77.1,77.6,75.7,75.1,74.3,73.8,73.1,72.7,72.3,72,71.9,71.7,71.3,70.9,70.3,69.8,69.2,68.8,68.8,67
61,,,,,,,,,80.7,78.4,78.1,77,76.3,75.6,75,74.4,73.9,73.5,73.3,73.1,72.9,72.6,72.1,71.5,71,70.4,69.8,69.8,68.2
62,,,,,,,,,,79.7,78.9,78.3,77.6,76.8,76.3,75.6,75.1,74.8,74.5,74.3,74.1,73.8,73.3,72.7,72.2,71.6,70.9,70.9,69.3
63,,,,,,,,,,,80.2,79.6,78.9,78.1,77.5,76.8,76.4,76,75.7,75.5,75.3,75,74.5,73.9,73.4,72.8,72.1,72.1,70.5
64,,,,,,,,,,,,80.9,80.2,79.3,78.8,78.1,77.6,77.2,76.9,76.7,76.5,76.2,75.7,75.1,74.5,73.9,73.3,73.3,71.6
65,,,,,,,,,,,,,,80.6,80,79.3,78.8,78.4,78.1,78,77.8,77.4,76.9,76.3,75.7,75.1,74.4,74.4,72.7
66,,,,,,,,,,,,,,,,80.5,80,79.7,79.4,79.2,79,78.6,78.1,77.5,76.9,76.3,75.6,75.6,73.9
67,,,,,,,,,,,,,,,,,,80.9,80.6,80.4,80.2,79.8,79.3,78.7,78.1,77.5,76.7,76.7,75
""";

const String _boyAdvancedGrowthCsv = """
SKELETAL AGES 7 THROUGH 11 YEARS,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Skeletal Age,7-0,7-3,7-6,7-9,8-0,8-3,8-6,8-9,9-0,9-3,9-6,9-9,10,10-3,10-6,10-9,11,11-3,11-6,11-9,12-0,12-3,12-6,12-9,13-0,13-3,13-6,13-9,14-0,14-3,14-6,14-9,15-0,15-3,15-6,15-9,16-0,16-3,16-6,16-9,17-0
% of Mature Height,67,67.6,68.3,68.9,69.6,70.3,70.9,71.5,72,72.8,73.4,74.1,74.7,75.3,75.8,76.3,76.7,77.6,77.8,80,80.9,81.8,82.8,83.9,85,86.3,87.5,89,90.5,91.8,93,94.3,95.8,96.7,97.1,97.6,98,98.3,98.5,98.8,
Ht. (inches),,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
41,61.2,60.7,60,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
42,62.7,62.1,61.5,61,60.3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
43,64.2,63.6,63,62.4,61.8,61.2,60.6,60.1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
44,65.7,65.1,64.4,63.8,63.2,62.6,62.1,61.5,61.1,60.4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
45,67.2,66.6,65.9,65.3,64.7,64,63.5,62.9,62.5,61.8,61.3,60.7,60.2,,,,,,,,,,,,,,,,,,,,,,,,,,,,
46,68.7,68,67.3,66.8,66.1,65.4,64.9,64.3,63.9,63.2,62.7,62.1,61.6,61.1,60.7,60.3,60,,,,,,,,,,,,,,,,,,,,,,,,
47,70.1,69.5,68.8,68.2,67.5,66.9,66.3,65.7,65.3,64.6,64,63.4,62.9,62.4,62,61.6,61.3,60.6,,,,,,,,,,,,,,,,,,,,,,,
48,71.6,71,70.3,69.7,69,68.3,67.7,67.1,66.7,65.9,65.4,64.8,64.3,63.7,63.3,62.9,62.6,61.9,61.1,60,,,,,,,,,,,,,,,,,,,,,
49,73.1,72.5,71.7,71.1,70.4,69.7,69.1,68.5,68.1,67.3,66.8,66.1,65.6,65.1,64.6,64.2,63.9,63.1,62.3,61.3,60.6,,,,,,,,,,,,,,,,,,,,
50,74.6,74,73.2,72.6,71.8,71.1,70.5,69.9,69.4,68.7,68.1,67.5,66.9,66.4,66,65.3,65.2,64.4,63.6,62.5,61.8,61.1,60.4,,,,,,,,,,,,,,,,,,
51,76.2,75.4,74.7,74,73.3,72.5,71.9,71.3,70.8,70.1,69.5,68.8,68.3,67.7,67.3,66.8,66.5,65.7,64.9,63.8,63,62.3,61.6,60.8,60,,,,,,,,,,,,,,,,
52,77.6,76.9,76.1,75.5,74.7,74,73.3,72.7,72.2,71.4,70.8,70.2,69.6,69.1,68.6,68.2,67.8,67.3,66.2,66,64.3,63.6,62.8,62,61.2,60.3,,,,,,,,,,,,,,,
53,79.1,78.4,77.6,76.9,76.2,75.4,74.8,74.1,73.6,72.8,72.2,71.5,71,70.4,69.9,69.5,69.1,68.3,67.4,66.3,65.5,64.8,64,63.2,62.4,61.4,60.6,,,,,,,,,,,,,,
54,80.6,79.9,79.1,78.4,77.6,76.8,76.2,75.5,75,74.2,73.6,72.9,72.3,71.7,71.2,70.8,70.4,69.6,68.7,67.5,66.7,66,65.2,64.4,63.6,62.9,62.1,60.7,,,,,,,,,,,,,
55,,,80.5,79.8,79,78.3,77.6,76.9,76.4,75.9,75.2,74.6,73.6,73,72.6,72.1,71.7,70.9,70,68.8,68,67.2,66.4,65.6,64.7,63.9,63,61.8,60.8,,,,,,,,,,,,
56,,,,,,80.5,79.7,79,78.3,77.8,77.1,76.6,75,74.4,73.9,73.4,73,72.2,71.2,70,69.2,68.5,67.6,66.7,65.9,64.9,64,62.9,61.9,61,60.2,,,,,,,,,,
57,,,,,,,,80.4,79.7,79.2,78.5,77.8,76.3,75.7,75.2,74.7,74.3,73.5,72.5,71.3,70.5,69.7,68.8,67.9,67.1,66,65.1,64,63,62.1,61.3,60.4,,,,,,,,,
58,,,,,,,,,80.6,79.7,79,78.3,77.6,77,76.5,76,75.6,74.7,73.8,72.5,71.7,70.9,70,69.1,68.2,67.2,66.3,65.2,64.1,63.2,62.4,61.5,60.5,60,,,,,,,
59,,,,,,,,,,,80.4,79.6,79,78.4,77.8,77.3,76.9,76,75.1,73.8,72.9,72.1,71.3,70.3,69.4,68.4,67.4,66.3,65.2,64.3,63.4,62.6,61.6,61,60.8,,,,,,
60,,,,,,,,,,,,,80.3,79.7,79.2,78.6,78.2,76,76.3,75,74.2,73.4,72.5,71.5,70.6,69.5,68.6,67.4,66.3,65.4,64.5,63.6,62.6,62,61.8,60.5,60.2,60,,,
61,,,,,,,,,,,,,,,80.5,79.9,79.5,76.3,77.6,76.3,75.4,74.6,73.7,72.7,71.8,70.7,69.7,68.6,67.4,66.4,65.6,64.7,63.7,63.1,62.8,61.5,61.2,61,60.9,60.7,60.6
62,,,,,,,,,,,,,,,,81.3,80.8,77.9,78.9,77.5,76.6,75.8,74.9,73.9,72.9,71.8,70.9,69.7,68.5,67.5,66.7,65.7,64.7,64.1,63.9,62.6,62.2,62.1,61.9,61.7,61.6
63,,,,,,,,,,,,,,,,,,,80.2,78.8,77.9,77,76.1,75.1,74.1,73,72,70.8,69.6,68.7,67.7,66.8,65.8,65.1,64.9,63.5,63.1,62.9,62.8,62.6,62.6
64,,,,,,,,,,,,,,,,,,,,80,79.1,78.2,77.3,76.3,75.3,74.2,73.1,71.9,70.7,69.7,68.7,67.9,66.8,66.2,65.9,64.5,64.3,64.1,64,63.8,63.6
65,,,,,,,,,,,,,,,,,,,,,80.3,79.5,78.5,77.5,76.5,75.3,74.3,73,71.8,70.8,70,68.9,67.8,67.2,66.9,65.6,65.3,65.1,65,64.8,64.6
66,,,,,,,,,,,,,,,,,,,,,,80.7,79.7,78.7,77.6,76.5,75.4,74.2,72.9,71.9,71,70,68.9,68.3,68,66.6,66.3,66.1,66,65.8,65.7
67,,,,,,,,,,,,,,,,,,,,,,,80.9,79.9,78.8,77.6,76.6,75.4,74,73,72.2,71.1,70,69.3,69,67.6,67.3,67.1,67,66.8,66.7
68,,,,,,,,,,,,,,,,,,,,,,,,,80,78.8,77.7,76.4,75.1,74.1,73.1,72.1,71,70.3,70,68.6,68.4,68.2,68,67.8,67.7
69,,,,,,,,,,,,,,,,,,,,,,,,,,80,78.9,77.8,76.2,75.2,74.2,73.2,72,71.4,71.1,69.7,69.4,69.2,69,68.8,68.7
70,,,,,,,,,,,,,,,,,,,,,,,,,,,80,78.7,77.3,76.3,75.3,74.2,73.1,72.4,72.1,70.7,70.4,70.2,70,69.8,69.7
71,,,,,,,,,,,,,,,,,,,,,,,,,,,,80.9,79.6,78.4,77.3,76.3,75.3,74.1,73.4,73.1,71.7,71.4,71.2,71.1,70.8
72,,,,,,,,,,,,,,,,,,,,,,,,,,,,,80.7,79.5,78.5,77.4,76.2,75.2,74.5,74.2,72.7,72.4,72.2,72.1,71.9
73,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,80.6,79.6,78.5,77.2,76.2,75.2,74.5,73.8,73.5,72.7,72.4,72.2
74,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,80.6,79.5,78.3,77.2,76.2,75.2,74.5,73.8,73.5,72.7,72.4
75,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,80.6,79.5,78.3,77.2,76.2,75.2,74.5,73.8,73.5,72.7
76,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,80.4,79.6,78.3,77.3,76.2,75.2,74.5,73.8,73.5
77,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,80.4,79.6,78.3,77.3,76.2,75.2,74.5,73.8
78,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,80.7,79.8,78.9,78.2,77.5,76.8,76.1
79,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,79.9,79.8,79.3,79.2,78.9,78.8
""";


const String _girlNormalGrowthCsv = """
Skeletal Age,6-0,6-3,6-6,6-9,7-0,7-3,7-6,7-9,8-0,8-3,8-6,8-10,9-0,9-3,9-6,9-9,10-0,10-3,10-6,10-9,11-0,11-3,11-6,11-9,12-0,12-3,12-6,12-9,13-0,13-3,13-6,13-9,14-0,14-3,14-6,14-9,15-0,15-3,15-6,15-9,16-0,16-3,16-6,16-9,17-0,17-6,18-0
% of Mature Height Ht. (inches),72,72.9,73.8,75.1,75.7,76.5,77.2,78.2,79,80.1,81,82.1,82.7,83.6,84.4,85.3,86.2,87.4,88.4,89.6,90.6,91,91.4,91.8,92.2,93.2,94.1,95,95.8,96.7,97.4,97.8,98,98.3,98.6,98.8,99,99.1,99.3,99.4,99.6,99.6,99.7,99.8,99.9,99.9,100
37,51.4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
38,52.8,52.1,51.5,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
39,54.2,53.5,52.8,52,51.5,51,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
40,55.6,54.9,54.2,53.5,52.8,52.3,51.8,51.2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
41,56.9,56.2,55.6,54.6,54.2,53.6,53.1,52.4,51.9,51.2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
42,58.3,57.6,56.9,55.9,55.5,54.9,54.4,53.7,53.2,52.4,51.9,51.2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
43,59.7,59,58.3,57.3,56.8,56.2,55.7,55,54.4,53.7,53.1,52.4,52,51.4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
44,61.1,60.4,59.6,58.6,58.1,57.5,57,56.3,55.7,54.9,54.3,53.6,53.2,52.6,52.1,51.6,51,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
45,62.5,61.7,61,59.9,59.4,58.8,58.3,57.5,57,56.2,55.6,54.8,54.4,53.8,53.3,52.8,52.2,51.5,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
46,63.9,63.1,62.3,61.3,60.8,60.1,59.6,58.8,58.2,57.4,56.8,56,55.6,55,54.5,53.9,53.4,52.6,52,51.3,,,,,,,,,,,,,,,,,,,,,,,,,,,
47,65.3,64.5,63.7,62.6,62.1,61.4,60.9,60.1,59.5,58.7,58,57.2,56.8,56.2,55.7,55.1,54.5,53.8,53.2,52.5,51.9,51.6,51.4,51.2,51,,,,,,,,,,,,,,,,,,,,,,
48,66.7,65.8,65,63.9,63.4,62.7,62.2,61.4,60.8,59.9,59.3,58.5,58,57.4,56.9,56.3,55.7,54.9,54.3,53.6,53,52.7,52.5,52.3,52.1,51.5,51,,,,,,,,,,,,,,,,,,,,
49,68.1,67.2,66.4,65.2,64.7,64.1,63.5,62.7,62,61.2,60.5,59.7,59.3,58.6,58.1,57.4,56.8,56.1,55.4,54.7,54.1,53.8,53.6,53.4,53.1,52.6,52.1,51.6,51.1,,,,,,,,,,,,,,,,,,
50,69.4,68.6,67.8,66.6,66.1,65.4,64.8,63.9,63.3,62.4,61.7,60.9,60.5,59.8,59.2,58.6,58,57.2,56.6,55.8,55.2,54.9,54.7,54.5,54.2,53.6,53.1,52.6,52.2,51.7,51.3,51.1,51,,,,,,,,,,,,,,
51,70.8,70,69.1,67.9,67.4,66.7,66.1,65.2,64.6,63.7,63,62.1,61.7,61,60.4,59.8,59.2,58.4,57.7,56.9,56.3,56,55.8,55.6,55.3,54.7,54.2,53.7,53.2,52.7,52.4,52.1,52,51.9,51.7,51.6,51.5,51.5,51.4,51.3,51.2,51.2,51.2,51.1,51.1,51,51
52,72.2,71.3,70.5,69.2,68.7,68,67.4,66.5,65.8,64.9,64.2,63.3,62.9,62.2,61.6,61,60.3,59.5,58.8,58,57.4,57.1,56.9,56.6,56.4,55.8,55.3,54.7,54.3,53.8,53.4,53.2,53.1,52.9,52.7,52.6,52.5,52.5,52.4,52.3,52.2,52.2,52.2,52.1,52.1,52,52
53,73.6,72.7,71.8,70.6,70,69.3,68.7,67.8,67.1,66.2,65.4,64.6,64.1,63.4,62.8,62.1,61.5,60.6,60,59.2,58.5,58.2,58,57.7,57.5,56.9,56.3,55.8,55.3,54.8,54.4,54.2,54.1,53.9,53.8,53.6,53.5,53.5,53.4,53.3,53.2,53.2,53.2,53.1,53.1,53,53
54,,74.1,73.2,71.9,71.3,70.6,69.9,69.1,68.4,67.4,66.7,65.8,65.3,64.6,64,63.3,62.6,61.8,61.1,60.3,59.6,59.3,59.1,58.8,58.6,57.9,57.4,56.8,56.4,55.8,55.5,55.2,55.1,54.9,54.8,54.7,54.5,54.5,54.4,54.3,54.2,54.2,54.2,54.1,54.1,54,54
55,,,74.5,73.2,72.7,71.9,71.2,70.3,69.6,68.7,67.9,67,66.5,65.8,65.2,64.5,63.8,62.9,62.2,61.4,60.7,60.4,60.2,59.9,59.7,59,58.4,57.9,57.4,56.9,56.5,56.2,56.1,56,55.8,55.7,55.6,55.5,55.4,55.3,55.2,55.2,55.2,55.1,55.1,55,55
56,,,,74.6,74,73.2,72.5,71.6,70.9,69.9,69.1,68.2,67.7,67,66.4,65.7,65,64.1,63.3,62.5,61.8,61.5,61.3,61,60.7,60.1,59.5,58.9,58.5,57.9,57.5,57.3,57.1,57,56.8,56.7,56.6,56.5,56.4,56.3,56.2,56.2,56.2,56.1,56.1,56,56
57,,,,,,74.5,73.8,72.9,72.2,71.2,70.4,69.4,68.9,68.2,67.5,66.8,66.1,65.2,64.5,63.6,62.9,62.6,62.4,62.1,61.8,61.2,60.6,60,59.5,58.9,58.5,58.3,58.2,58,57.8,57.7,57.6,57.5,57.4,57.3,57.2,57.2,57.2,57.1,57.1,57,57
58,,,,,,,,74.2,73.4,72.4,71.6,70.6,70.1,69.4,68.7,68,67.3,66.4,65.6,64.7,64,63.7,63.5,63.2,62.9,62.2,61.6,61.1,60.5,60,59.5,59.3,59.2,59,58.8,58.7,58.6,58.5,58.4,58.3,58.2,58.2,58.2,58.1,58.1,58,58
59,,,,,,,,,74.7,73.7,72.8,71.9,71.3,70.6,69.9,69.2,68.4,67.5,66.7,65.8,65.1,64.8,64.6,64.3,64,63.3,62.7,62.1,61.6,61,60.6,60.3,60.2,60,59.8,59.7,59.6,59.5,59.4,59.4,59.2,59.2,59.2,59.1,59.1,59,59
60,,,,,,,,,,74.9,74.1,73.1,72.6,71.8,71.1,70.3,69.6,68.7,67.9,67,66.2,65.9,65.6,65.4,65.1,64.4,63.8,63.2,62.6,62,61.6,61.3,61.2,61,60.9,60.7,60.6,60.5,60.4,60.4,60.2,60.2,60.2,60.1,60.1,60,60
61,,,,,,,,,,,,74.3,73.8,73,72.3,71.5,70.8,69.8,69,68.1,67.3,67,66.7,66.4,66.2,65.5,64.8,64.2,63.7,63.1,62.6,62.4,62.2,62.1,61.9,61.7,61.6,61.6,61.4,61.4,61.2,61.2,61.2,61.1,61.1,61,61
62,,,,,,,,,,,,,,74.2,73.5,72.7,71.9,70.9,70.1,69.2,68.4,68.1,67.8,67.5,67.2,66.5,65.9,65.3,64.7,64.1,63.7,63.4,63.3,63.1,62.9,62.8,62.6,62.6,62.4,62.4,62.2,62.2,62.2,62.1,62.1,62,62
63,,,,,,,,,,,,,,,74.6,73.9,73.1,72.1,71.3,70.3,69.5,69.2,68.9,68.6,68.3,67.6,67,66.3,65.8,65.1,64.7,64.4,64.3,64.1,63.9,63.8,63.6,63.6,63.4,63.4,63.3,63.3,63.2,63.1,63.1,63,63
64,,,,,,,,,,,,,,,,,74.2,73.2,72.4,71.4,70.6,70.3,70,69.7,69.4,68.7,68,67.4,66.8,66.2,65.7,65.4,65.3,65.1,64.9,64.8,64.6,64.6,64.4,64.4,64.3,64.3,64.2,64.1,64.1,64,64
65,,,,,,,,,,,,,,,,,,74.4,73.4,72.5,71.7,71.4,71.1,70.8,70.5,69.7,69.1,68.4,67.8,67.2,66.7,66.5,66.3,66.1,65.9,65.8,65.7,65.6,65.5,65.4,65.3,65.3,65.2,65.1,65.1,65,65
66,,,,,,,,,,,,,,,,,,,74.7,73.7,72.9,72.5,72.2,71.9,71.6,70.8,70.1,69.5,68.9,68.3,67.8,67.5,67.3,67.1,66.9,66.8,66.7,66.6,66.5,66.4,66.3,66.3,66.2,66.1,66.1,66,66
67,,,,,,,,,,,,,,,,,,,,74.8,74,73.6,73.3,73,72.7,71.9,71.2,70.5,69.9,69.3,68.8,68.5,68.4,68.2,68,67.8,67.7,67.6,67.5,67.4,67.3,67.3,67.2,67.1,67.1,67,67
68,,,,,,,,,,,,,,,,,,,,,,74.7,74.4,74.1,73.8,73,72.3,71.6,71,70.3,69.8,69.5,69.4,69.2,69,68.8,68.7,68.6,68.5,68.4,68.3,68.3,68.2,68.1,68.1,68,68
69,,,,,,,,,,,,,,,,,,,,,,,,,74.8,74,73.3,72.6,72,71.4,70.8,70.6,70.4,70.2,70,69.8,69.7,69.6,69.5,69.4,69.3,69.3,69.2,69.1,69.1,69,69
70,,,,,,,,,,,,,,,,,,,,,,,,,,,74.4,73.7,73.1,72.4,71.9,71.6,71.4,71.2,71,70.8,70.7,70.6,70.5,70.4,70.3,70.3,70.2,70.1,70.1,70,70
71,,,,,,,,,,,,,,,,,,,,,,,,,,,,74.7,74.1,73.4,72.9,72.6,72.4,72.2,72,71.9,71.7,71.6,71.5,71.4,71.3,71.3,71.2,71.1,71.1,71,71
72,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,74.5,73.9,73.6,73.5,73.2,73,72.9,72.7,72.7,72.5,72.4,72.3,72.3,72.2,72.1,72.1,72,72
73,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,74.9,74.6,74.5,74.3,74,73.9,73.7,73.7,73.5,73.4,73.3,73.3,73.2,73.1,73.1,73,73
74,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,74.9,74.7,74.7,74.5,74.4,74.3,74.3,74.2,74.1,74.1,74,74
""";

const String _girlDelayedGrowthCsv = """
Skeletal Age,6-0,6-3,6-6,6-10,7-0,7-3,7-6,7-10,8-0,8-3,8-6,8-10,9-0,9-3,9-6,9-9,10-0,10-3,10-6,10-9,11-0,11-3,11-6,11-9,12-0,12-3,12-6,12-9,13-0,13-3,13-6,13-9,14-0,14-3,14-6,14-9,15-0,15-3,15-6,15-9,16-0,16-3,16-6,16-9,17-0
% of Mature Height Ht. (inches),73.3,74.2,75.1,76.3,77,77.9,78.8,79.7,80.4,81.3,82.3,83.6,84.1,85.1,85.8,86.6,87.4,88.4,89.6,90.7,91.8,92.2,92.6,92.9,93.2,94.2,94.9,95.7,96.4,97.1,97.7,98.1,98.3,98.6,98.9,99.2,99.4,99.5,99.6,99.7,99.8,99.9,99.9,99.95,100
38,51.8,51.2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
39,53.2,52.6,51.9,51.1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
40,54.6,53.9,53.3,52.4,51.9,51.3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
41,55.9,55.3,54.6,53.7,53.2,52.6,52,51.4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
42,57.3,56.6,55.9,55,54.5,53.9,53.3,52.7,52.2,51.7,51,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
43,58.7,58,57.3,56.4,55.8,55.2,54.6,54,53.5,52.9,52.2,51.4,51.1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
44,60,59.3,58.6,57.7,57.1,56.5,55.9,55.2,54.7,54.1,53.5,52.6,52.3,51.7,51.3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
45,61.4,60.6,59.9,59,58.4,57.8,57.1,56.5,56,55.4,54.7,53.8,53.5,52.9,52.4,52,51.5,,,,,,,,,,,,,,,,,,,,,,,,,,,,
46,62.8,62,61.3,60.3,59.7,59.1,58.4,57.7,57.2,56.6,55.9,55,54.7,54.1,53.6,53.1,52.6,52,51.3,,,,,,,,,,,,,,,,,,,,,,,,,,
47,64.1,63.3,62.6,61.6,61,60.3,59.6,59,58.5,57.8,57.1,56.2,55.9,55.2,54.8,54.3,53.8,53.2,52.5,51.8,51.2,51,,,,,,,,,,,,,,,,,,,,,,,
48,65.5,64.7,63.9,62.9,62.3,61.6,60.9,60.2,59.7,59,58.3,57.4,57.1,56.4,55.9,55.4,54.9,54.3,53.6,52.9,52.3,52.1,51.8,51.7,51.5,51,,,,,,,,,,,,,,,,,,,
49,66.9,66,65.2,64.2,63.6,62.9,62.2,61.5,60.9,60.3,59.5,58.6,58.3,57.6,57.1,56.6,56.1,55.4,54.7,54,53.4,53.1,52.9,52.7,52.6,52,51.6,51.2,,,,,,,,,,,,,,,,,
50,68.2,67.4,66.6,65.5,64.9,64.2,63.5,62.7,62.2,61.5,60.8,59.9,59.5,58.8,58.3,57.7,57.2,56.6,55.8,55.1,54.5,54.2,54,53.8,53.6,53.1,52.7,52.2,51.9,51.5,51.2,51,,,,,,,,,,,,,
51,69.6,68.7,67.9,66.8,66.2,65.5,64.7,64,63.4,62.7,62,61,60.6,59.9,59.4,58.9,58.4,57.7,56.9,56.2,55.6,55.3,55.1,54.9,54.7,54.1,53.7,53.3,52.9,52.5,52.2,52,51.9,51.7,51.6,51.4,51.3,51.3,51.2,51.2,51.1,51.1,51.1,51,51
52,70.9,70.1,69.2,68.2,67.5,66.8,66,65.2,64.7,64,63.2,62.2,61.8,61.1,60.6,60,59.5,58.8,58,57.3,56.6,56.4,56.2,56,55.8,55.2,54.8,54.3,53.9,53.6,53.2,53,52.9,52.7,52.6,52.4,52.3,52.3,52.2,52.2,52.1,52.1,52.1,52,52
53,72.3,71.4,70.6,69.5,68.8,68,67.3,66.5,65.9,65.2,64.4,63.4,63,62.3,61.8,61.2,60.6,60,59.2,58.4,57.7,57.5,57.3,57.1,56.9,56.3,55.8,55.4,55,54.6,54.2,54,53.9,53.8,53.6,53.4,53.3,53.3,53.2,53.2,53.1,53.1,53.1,53,53
54,73.7,72.8,71.9,70.8,70.1,69.3,68.5,67.8,67.2,66.4,65.6,64.6,64.2,63.5,62.9,62.4,61.8,61.1,60.3,59.5,58.8,58.6,58.3,58.1,57.9,57.3,56.9,56.4,56,55.6,55.3,55,54.9,54.8,54.6,54.4,54.3,54.3,54.2,54.2,54.1,54.1,54.1,54,54
55,,74.1,73.2,72.1,71.4,70.6,69.8,69,68.4,67.7,66.8,65.8,65.4,64.6,64.1,63.5,62.9,62.2,61.4,60.6,59.9,59.7,59.4,59.2,59,58.4,58,57.5,57.1,56.6,56.3,56.1,56,55.8,55.6,55.4,55.3,55.3,55.2,55.2,55.1,55.1,55.1,55,55
56,,,74.6,73.4,72.7,71.9,71.1,70.3,69.7,68.9,68,67,66.6,65.8,65.3,64.7,64.1,63.3,62.5,61.7,61,60.7,60.5,60.3,60.1,59.4,59,58.5,58.1,57.7,57.3,57.1,57,56.8,56.6,56.5,56.3,56.3,56.2,56.2,56.1,56.1,56.1,56,56
57,,,,74.7,74,73.2,72.3,71.5,70.9,70.1,69.3,68.2,67.8,67,66.4,65.8,65.2,64.5,63.6,62.8,62.1,61.8,61.6,61.4,61.2,60.5,60.1,59.6,59.1,58.7,58.3,58.1,58,57.8,57.6,57.5,57.3,57.3,57.2,57.2,57.1,57.1,57.1,57,57
58,,,,,,74.5,73.6,72.8,72.1,71.3,70.5,69.4,69,68.2,67.6,67,66.4,65.6,64.7,63.9,63.2,62.9,62.6,62.4,62.2,61.6,61.1,60.6,60.2,59.7,59.4,59.1,59,58.8,58.6,58.5,58.3,58.3,58.2,58.2,58.1,58.1,58.1,58,58
59,,,,,,,74.9,74,73.4,72.6,71.7,70.6,70.2,69.3,68.8,68.1,67.5,66.7,65.8,65,64.3,64,63.7,63.5,63.3,62.6,62.2,61.7,61.2,60.8,60.4,60.1,60,59.8,59.7,59.5,59.4,59.3,59.2,59.2,59.1,59.1,59.1,59,59
60,,,,,,,,,74.6,73.8,72.9,71.8,71.3,70.5,69.9,69.3,68.7,67.9,67,66.2,65.4,65.1,64.8,64.6,64.4,63.7,63.2,62.7,62.2,61.8,61.4,61.2,61,60.9,60.7,60.5,60.4,60.3,60.2,60.2,60.1,60.1,60.1,60,60
61,,,,,,,,,,,74.1,73,72.5,71.7,71.1,70.4,69.8,69,68.1,67.3,66.4,66.2,65.9,65.7,65.5,64.8,64.3,63.7,63.3,62.8,62.4,62.2,62.1,61.9,61.7,61.5,61.4,61.3,61.2,61.2,61.1,61.1,61.1,61,61
62,,,,,,,,,,,,74.2,73.7,72.9,72.3,71.6,70.9,70.1,69.2,68.4,67.5,67.2,67,66.7,66.5,65.8,65.3,64.8,64.3,63.9,63.5,63.2,63.1,62.9,62.7,62.5,62.4,62.3,62.2,62.2,62.1,62.1,62.1,62,62
63,,,,,,,,,,,,,74.7,74,73.4,72.7,72.1,71.3,70.3,69.5,68.6,68.3,68,67.8,67.6,66.9,66.4,65.8,65.3,64.9,64.5,64.2,64.1,63.9,63.7,63.5,63.4,63.3,63.2,63.2,63.1,63.1,63.1,63,63
64,,,,,,,,,,,,,,,74.6,73.9,73.2,72.4,71.4,70.6,69.7,69.4,69.1,68.9,68.7,67.9,67.4,66.9,66.4,65.9,65.5,65.2,65.1,64.9,64.7,64.5,64.4,64.3,64.3,64.2,64.1,64.1,64.1,64,64
65,,,,,,,,,,,,,,,,,74.4,73.5,72.5,71.7,70.8,70.5,70.2,70,69.7,69,68.5,67.9,67.4,66.9,66.5,66.3,66.1,65.9,65.7,65.5,65.4,65.3,65.3,65.2,65.1,65.1,65.1,65,65
66,,,,,,,,,,,,,,,,,,74.5,73.7,72.8,71.9,71.6,71.3,71,70.8,70.1,69.5,69,68.5,68,67.6,67.3,67.1,66.9,66.7,66.5,66.4,66.3,66.3,66.2,66.1,66.1,66.1,66,66
67,,,,,,,,,,,,,,,,,,,74.8,73.9,73,2.7,72.4,72.1,71.9,71.1,70.6,70,69.5,69,68.6,68.3,68.2,68,67.7,67.5,67.4,67.3,67.3,67.2,67.1,67.1,67.1,67,67
68,,,,,,,,,,,,,,,,,,,,,74.1,73.8,73.4,73.2,73,72.2,71.7,71.1,70.5,70,69.6,69.3,69.2,69,68.8,68.6,68.4,68.3,68.3,68.2,68.1,68.1,68.1,68,68
69,,,,,,,,,,,,,,,,,,,,,,74.8,74.5,74.3,74,73.2,72.7,72.1,71.6,71.1,70.6,70.3,70.2,70,69.8,69.6,69.4,69.3,69.3,69.2,69.1,69.1,69.1,69,69
70,,,,,,,,,,,,,,,,,,,,,,,,,,74.3,73.8,73.1,72.6,72.1,71.6,71.4,71.2,71,70.8,70.6,70.4,70.4,70.3,70.2,70.1,70.1,70.1,70,70
71,,,,,,,,,,,,,,,,,,,,,,,,,,,74.8,74.2,73.6,73.1,72.7,72.4,72.2,72,71.8,71.6,71.4,71.4,71.3,71.2,71.1,71.1,71.1,71,71
72,,,,,,,,,,,,,,,,,,,,,,,,,,,,,74.7,74.2,73.7,73.3,73.3,73,72.8,72.6,72.4,72.4,72.3,72.2,72.1,72.1,72.1,72,72
73,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,74.7,74.4,74.3,74,73.8,73.6,73.4,73.4,73.3,73.2,73.1,73.1,73.1,73,73
74,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,74.8,74.6,74.4,74.4,74.3,74.2,74.1,74.1,74.1,74,74
""";

const String _girlAdvancedGrowthCsv = """
Skeletal Age,7-0,7-3,7-6,7-9,8-0,8-3,8-6,8-10,9-0,9-3,9-6,9-9,10-0,10-3,10-6,10-9,11-0,11-3,11-6,11-9,12-0,12-3,12-6,12-9,13-0,13-3,13-6,13-9,14-0,14-3,14-6,14-9,15-0,15-3,15-6,15-9,16-0,16-3,16-6,16-9,17-0,17-3
% of Mature Height Ht. (inches),71.2,72.2,73.2,74.2,75,76,77.1,78.4,79,80,80.9,81.9,82.8,84.1,85.6,87,88.3,89.7,89.1,89.7,90.1,91.3,92.4,93.5,94.5,95.5,96.8,96.8,97.2,97.7,98,98.3,98.6,98.8,99,99.2,99.3,99.4,99.5,99.7,99.8,99.95
37,52,51.2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
38,53.4,52.6,51.9,51.2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
39,54.8,54,53.3,52.6,52,51.3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
40,56.2,55.4,54.6,53.9,53.3,52.6,51.9,51,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
41,57.6,56.8,56,55.3,54.7,53.9,53.2,52.3,51.9,51.3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
42,59,58.2,57.4,56.6,56,55.3,54.5,53.8,53.2,52.5,51.9,51.3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
43,60.4,59.6,58.7,58,57.3,56.6,55.8,54.8,54.4,53.8,53.2,52.5,51.9,51.1,,,,,,,,,,,,,,,,,,,,,,,,,,,,
44,61.8,60.9,60.1,59.3,58.7,57.9,57.1,56.1,55.7,55,54.4,53.7,53.1,52.3,51.4,,,,,,,,,,,,,,,,,,,,,,,,,,,
45,63.2,62.3,61.5,60.6,60,59.2,58.4,57.4,57,56.3,55.6,54.9,54.3,53.5,52.6,51.7,51,,,,,,,,,,,,,,,,,,,,,,,,,
46,64.6,63.7,62.8,62,61.3,60.5,59.7,58.7,58.2,57.5,56.9,56.2,55.6,54.7,53.7,52.9,52.1,51.9,51.6,51.3,51.1,,,,,,,,,,,,,,,,,,,,,
47,66,65.1,64.2,63.3,62.7,61.8,61,59.9,59.5,58.8,58.1,57.4,56.8,55.9,54.9,54,53.2,53,52.7,52.4,52.2,51.5,,,,,,,,,,,,,,,,,,,,
48,67.4,66.5,65.6,64.7,64,63.2,62.3,61.2,60.8,60,59.3,58.6,58,57.1,56.1,55.2,54.4,54.1,53.9,53.5,53.3,52.6,51.9,51.3,,,,,,,,,,,,,,,,,,
49,68.8,67.9,66.9,66,65.3,64.5,63.6,62.5,62,61.3,60.6,59.8,59.2,58.3,57.2,56.3,55.5,55.2,55,54.6,54.4,53.7,53,52.4,51.9,51.3,50.9,,,,,,,,,,,,,,,
50,70.2,69.3,68.3,67.4,66.7,65.8,64.9,63.8,63.3,62.5,61.8,61.1,60.4,59.5,58.4,57.5,56.6,56.4,56.1,55.7,55.5,54.8,54.1,53.5,52.9,52.4,51.9,51.7,51.4,51.2,51,,,,,,,,,,,
51,71.6,70.6,69.7,68.7,68,67.1,66.1,65.1,64.6,63.8,63,62.3,61.6,60.6,59.6,58.6,57.8,57.5,57.2,56.9,56.6,55.9,55.2,54.5,54,53.4,53,52.7,52.5,52.2,52,51.9,51.7,51.6,51.5,51.4,51.4,51.3,51.3,51.2,51.1,51
52,73,72,71,70.1,69.3,68.4,67.4,66.3,65.8,65,64.3,63.5,62.8,61.8,60.7,59.8,58.9,58.6,58.4,58,57.7,57,56.3,55.6,55,54.5,54,53.7,53.5,53.2,53.1,52.9,52.7,52.6,52.5,52.4,52.4,52.3,52.3,52.2,52.1,52
53,74.4,73.4,72.4,71.4,70.7,69.7,68.7,67.6,67.1,66.3,65.5,64.7,64,63,61.9,60.9,60,59.8,59.5,59.1,58.8,58.1,57.4,56.7,56.1,55.5,55,54.8,54.5,54.2,54.1,53.9,53.8,53.6,53.5,53.4,53.4,53.3,53.3,53.2,53.1,53
54,,74.8,73.8,72.8,72,71.1,70,68.9,68.4,67.5,66.7,65.9,65.2,64.2,63.1,62.1,61.2,60.9,60.6,60.2,59.9,59.1,58.4,57.8,57.1,56.5,56.1,55.8,55.6,55.3,55.1,54.9,54.8,54.7,54.5,54.4,54.4,54.3,54.3,54.2,54.1,54
55,,,,74.1,73.3,72.4,71.3,70.2,69.9,68.8,68,67.2,66.4,65.4,64.3,63.2,62,62,61.7,61.3,61,60.2,59.5,58.8,58.2,57.6,57.1,56.8,56.6,56.3,56.1,56,55.8,55.7,55.5,55.4,55.4,55.3,55.3,55.2,55.1,55
56,,,,,74.7,73.8,72.6,71.4,70.8,70,69.2,68.4,67.6,66.6,65.4,64.4,63.1,63.1,62.8,62.4,62.1,61.3,60.6,59.9,59.3,58.6,58.2,57.9,57.6,57.3,57.1,57,56.8,56.7,56.5,56.5,56.4,56.3,56.3,56.2,56.1,56
57,,,,,,,73.9,72.7,72,71.3,70.5,69.6,69,67.8,66.6,65.5,64.3,64.3,64,63.5,63.3,62.4,61.7,61,60.3,59.7,59.2,58.9,58.6,58.3,58.2,58,57.8,57.7,57.6,57.5,57.4,57.3,57.3,57.2,57.1,57
58,,,,,,,,74,73.3,72.5,71.7,70.8,70.2,68.9,67.8,66.7,65.4,65.4,5.1,64.7,64.4,63.5,62.8,62,61.4,60.7,60.2,59.9,59.7,59.4,59.2,59,58.8,58.7,58.6,58.5,58.4,58.3,58.3,58.2,58.1,58
59,,,,,,,,,74.5,73.8,72.9,72,71.3,70.1,68.9,67.8,66.5,66.5,66.2,65.8,65.5,64.6,63.9,63.1,62.4,61.8,61.3,61,60.7,60.4,60.2,60,59.8,59.7,59.6,59.5,59.4,59.4,59.3,59.2,59.1,59
60,,,,,,,,,,,74.2,73.3,72.5,71.3,70.1,69,67.6,67.6,67.3,66.9,66.6,65.7,64.9,64.2,63.5,62.8,62.3,62,61.7,61.4,61.2,61,60.9,60.7,60.6,60.5,60.4,60.4,60.3,60.2,60.1,60
61,,,,,,,,,,,,74.5,73.7,72.4,71.3,70.1,68.8,68.8,68.5,68,67.7,66.8,66,65.2,64.6,63.9,63.3,63,62.8,62.4,62.2,62.1,61.9,61.7,61.6,61.5,61.4,61.4,61.3,61.2,61.1,61
62,,,,,,,,,,,,,74.9,73.6,72.4,71.3,69.9,69.9,69.6,69.1,68.8,67.9,67.1,66.3,65.6,64.9,64.4,64,63.8,63.5,63.3,63.1,62.9,62.8,62.6,62.5,62.4,62.4,62.3,62.2,62.1,62
63,,,,,,,,,,,,,,74.8,73.6,72.4,71,71,70.7,70.2,69.9,69,68.2,67.4,66.7,66,65.4,65.1,64.8,64.5,64.3,64.1,63.9,63.8,63.6,63.5,63.4,63.4,63.3,63.2,63.1,63
64,,,,,,,,,,,,,,,74.7,73.6,72.2,72.2,71.8,71.3,71,70.1,69.3,68.4,67.7,67,66.5,66.1,65.8,65.5,65.3,65.1,64.9,64.8,64.6,64.5,64.4,64.4,64.3,64.2,64.1,64
65,,,,,,,,,,,,,,,,74.7,73.3,3.3,72.9,72.5,72.1,71.2,70.3,69.5,68.8,68.1,67.5,67.1,66.9,66.6,66.3,66.1,65.9,65.8,65.7,65.5,65.5,65.4,65.3,65.2,65.1,65
66,,,,,,,,,,,,,,,,,74.4,74.4,74.1,73.6,73.3,72.3,71.4,70.6,69.8,69.1,68.5,68.2,67.9,67.6,67.3,67.1,66.9,66.8,66.7,66.5,66.5,66.4,66.3,66.2,66.1,66
67,,,,,,,,,,,,,,,,,,,,74.7,74.4,73.4,72.5,71.7,70.9,70.2,69.6,69.2,68.9,68.6,68.4,68.2,68,67.8,67.7,67.5,67.5,67.4,67.3,67.2,67.1,67
68,,,,,,,,,,,,,,,,,,,,,,74.5,73.6,72.7,72,71.2,70,70.2,70,69.6,69.4,69.2,69,68.8,68.7,68.6,68.5,68.4,68.3,68.2,68.1,68
69,,,,,,,,,,,,,,,,,,,,,,,74.7,73.8,73,72.3,71.7,71.3,71,70.6,70.4,70.2,70,69.8,69.7,69.6,69.5,69.4,69.3,69.2,69.1,69
70,,,,,,,,,,,,,,,,,,,,,,,,74.9,74.1,73.3,72.7,72.3,72,71.6,71.4,71.2,71,70.8,70.7,70.6,70.5,70.4,70.3,70.2,70.1,70
71,,,,,,,,,,,,,,,,,,,,,,,,,,74.3,73.7,73.3,73,72.7,72.4,72.2,72,71.9,71.7,71.6,71.5,71.4,71.4,71.2,71.1,71
72,,,,,,,,,,,,,,,,,,,,,,,,,,,74.8,74.4,74.1,73.7,73.5,73.2,73,72.9,72.7,72.6,72.5,72.4,72.4,72.2,72.1,72
73,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,74.7,74.5,74.3,74,73.9,73.7,73.6,73.5,73.1,73.1,73.2,73.1,73
74,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,74.9,74.4,74.6,74.5,74.4,74.4,74.2,74.1,74
""";


/// A service to ingest skeletal age data and predict final height.
/// It acts as the custodian for multiple growth tables (by sex and skeletal age category).
class HeightPredictionService {
  /// Stores all the parsed growth data tables.
  /// Structure: Map<Sex, Map<SkeletalAgeCategory, List<ChildGrowthDataRow>>>
  /// Sex: 'boy', 'girl'
  /// SkeletalAgeCategory: 'normal', 'delayed_lt_1yr', 'advanced_lt_1yr', 'delayed_gt_1yr', 'advanced_gt_1yr'
  final Map<String, Map<String, List<ChildGrowthDataRow>>> _allGrowthData;

  /// Constructor that ingests all provided CSV data upon instantiation.
  /// It now takes no arguments, as the CSV data is hardcoded within the class.
  HeightPredictionService() : _allGrowthData = {} {
    print('HeightPredictionService: Starting data ingestion during instantiation...');

    // Define all raw CSVs directly within the service.
    // This map structure matches what _setupAllGrowthData expects.
    final Map<String, Map<String, String>> allRawCsvs = {
      'boy': {
        'normal': _boyNormalGrowthCsv,
        'delayed_gt_1yr': _boyDelayedGrowthCsv, // Assuming 'delayed_gt_1yr' for simplicity
        'advanced_gt_1yr': _boyAdvancedGrowthCsv, // Assuming 'advanced_gt_1yr' for simplicity
        // You can add 'delayed_lt_1yr' and 'advanced_lt_1yr' if you have data for them
      },
      'girl': {
        'normal': _girlNormalGrowthCsv,
        'delayed_gt_1yr': _girlDelayedGrowthCsv, // Assuming 'delayed_gt_1yr' for simplicity
        'advanced_gt_1yr': _girlAdvancedGrowthCsv, // Assuming 'advanced_gt_1yr' for simplicity
        // You can add 'delayed_lt_1yr' and 'advanced_lt_1yr' if you have data for them
      },
    };

    _setupAllGrowthData(allRawCsvs);
    print('HeightPredictionService: All data ingestion complete.');
  }

  /// Internal method to ingest CSV data for a specific sex and skeletal age category.
  ///
  /// [sex]: 'boy' or 'girl'.
  /// [category]: 'normal', 'delayed_lt_1yr' (delayed less than 1 year),
  ///             'advanced_lt_1yr' (advanced less than 1 year),
  ///             'delayed_gt_1yr' (delayed greater than 1 year),
  ///             'advanced_gt_1yr' (advanced greater than 1 year).
  /// [csvString]: The raw CSV data for the specified table.
  void _ingestCsvData(String sex, String category, String csvString) {
    if (!_allGrowthData.containsKey(sex)) {
      _allGrowthData[sex] = {};
    }

    final List<ChildGrowthDataRow> newData = _parseGrowthCsv(csvString);

    if (_allGrowthData[sex]!.containsKey(category)) {
      // Merge with existing data for this category
      final existingData = _allGrowthData[sex]![category]!;
      final Map<int, ChildGrowthDataRow> mergedMap = {
        for (var row in existingData) row.childCurrentHeightInches: row
      };
      for (var newRow in newData) {
        if (mergedMap.containsKey(newRow.childCurrentHeightInches)) {
          mergedMap[newRow.childCurrentHeightInches] = mergedMap[newRow.childCurrentHeightInches]!.merge(newRow);
        } else {
          mergedMap[newRow.childCurrentHeightInches] = newRow;
        }
      }
      _allGrowthData[sex]![category] = mergedMap.values.toList()
        ..sort((a, b) => a.childCurrentHeightInches.compareTo(b.childCurrentHeightInches));
    } else {
      _allGrowthData[sex]![category] = newData;
    }

    print('  Ingested data for Sex: $sex, Category: $category. Total rows: ${_allGrowthData[sex]![category]!.length}');
  }

  /// Internal helper to parse a single CSV string into a List of ChildGrowthDataRow.
  List<ChildGrowthDataRow> _parseGrowthCsv(String csvString) {
    final Map<int, ChildGrowthDataRow> combinedDataMap = {};
    final List<String> lines = csvString.trim().split('\n');
    if (lines.length < 4) {
      return [];
    }

    final List<String> skeletalAgeHeaders = lines[0].split(',').sublist(1).map((s) => s.trim()).toList();

    for (int i = 3; i < lines.length; i++) {
      final List<String> rowParts = lines[i].split(',').map((s) => s.trim()).toList();

      if (rowParts.isNotEmpty && rowParts[0].isNotEmpty) {
        try {
          final ChildGrowthDataRow newRowData = ChildGrowthDataRow.fromCsvRow(rowParts, skeletalAgeHeaders);

          if (combinedDataMap.containsKey(newRowData.childCurrentHeightInches)) {
            final existingData = combinedDataMap[newRowData.childCurrentHeightInches]!;
            combinedDataMap[newRowData.childCurrentHeightInches] = existingData.merge(newRowData);
          } else {
            combinedDataMap[newRowData.childCurrentHeightInches] = newRowData;
          }
        } catch (e) {
          print('    Error parsing row ${i + 1}: $e - Row content: ${lines[i]}');
        }
      }
    }

    final List<ChildGrowthDataRow> finalData = combinedDataMap.values.toList();
    finalData.sort((a, b) => a.childCurrentHeightInches.compareTo(b.childCurrentHeightInches));
    return finalData;
  }

  /// Determines the skeletal age difference category.
  String _getSkeletalAgeCategory(double skeletalAgeDecimal, double actualAgeDecimal) {
    final double difference = skeletalAgeDecimal - actualAgeDecimal;
    if (difference.abs() < 1.0) {
      return 'normal'; // Within one year
    } else if (difference >= 1.0) {
      return 'advanced_gt_1yr'; // Advanced by 1 year or more
    } else { // difference <= -1.0
      return 'delayed_gt_1yr'; // Delayed by 1 year or more
    }
  }

  /// Performs linear interpolation between two points.
  double _linearInterpolation(double x, double x1, double y1, double x2, double y2) {
    if (x1 == x2) return y1; // Avoid division by zero, return one of the existing values
    return y1 + ((x - x1) * (y2 - y1) / (x2 - x1));
  }

  /// Predicts the final height of a child using bilinear interpolation,
  /// prioritizing direct lookups if the exact data point exists.
  ///
  /// [childCurrentHeightInches]: The child's current height in inches.
  /// [childSkeletalAgeStr]: The child's skeletal age as a string (e.g., "8-0").
  /// [childActualAgeDecimalYears]: The child's actual chronological age in decimal years.
  /// [sex]: The child's sex ('boy' or 'girl').
  ///
  /// Returns a [PredictedFinalHeightData] object, or null if prediction is not possible.
  PredictedFinalHeightData? predictFinalHeight({
    required double childCurrentHeightInches,
    required String childSkeletalAgeStr,
    required double childActualAgeDecimalYears,
    required String sex,
  }) {
    final double skeletalAgeDecimal = _calculateDecimalSkeletalAge(childSkeletalAgeStr);
    final String category = _getSkeletalAgeCategory(skeletalAgeDecimal, childActualAgeDecimalYears);

    final List<ChildGrowthDataRow>? tableData = _allGrowthData[sex]?[category];

    if (tableData == null || tableData.isEmpty) {
      print('Error: No data table found for Sex: $sex, Category: $category. '
          'Please ensure data for this category was provided during instantiation.');
      return null;
    }

    // --- Direct Lookup Check ---
    // First, try to find a direct match for current height
    final directCurrentHeightRow = tableData.firstWhereOrNull(
            (row) => row.childCurrentHeightInches == childCurrentHeightInches.round()); // Use round for int match

    if (directCurrentHeightRow != null) {
      // If current height matches, check for direct skeletal age match in that row
      final directPredictedHeight = directCurrentHeightRow.estimatedFinalHeightsBySkeletalAge[childSkeletalAgeStr];
      if (directPredictedHeight != null) {
        print('Direct lookup found! Returning exact value.');
        return PredictedFinalHeightData(
          childCurrentHeightInches: childCurrentHeightInches,
          childSkeletalAgeString: childSkeletalAgeStr,
          childActualAgeDecimalYears: childActualAgeDecimalYears,
          sex: sex,
          skeletalAgeDifferenceCategory: category,
          skeletalAgeDecimalYears: skeletalAgeDecimal,
          childCurrentHeightCm: childCurrentHeightInches * inchesToCm,
          predictedFinalHeightInches: directPredictedHeight,
          predictedFinalHeightCm: directPredictedHeight * inchesToCm,
        );
      }
    }
    // --- End Direct Lookup Check ---


    // --- If no direct lookup, proceed with Interpolation ---

    // Ensure there are at least two skeletal ages for interpolation
    final SplayTreeSet<double> availableSkeletalAges = SplayTreeSet();
    for (final row in tableData) {
      for (final skeletalAgeKey in row.estimatedFinalHeightsBySkeletalAge.keys) {
        availableSkeletalAges.add(_calculateDecimalSkeletalAge(skeletalAgeKey));
      }
    }

    if (availableSkeletalAges.length < 2) {
      print('Error: Not enough skeletal age data points for interpolation in selected table.');
      return null;
    }

    double x1_sa_dec, x2_sa_dec; // Decimal skeletal ages for interpolation points
    String x1_sa_str, x2_sa_str; // String skeletal ages for map lookup

    // Determine the skeletal age bounds
    if (skeletalAgeDecimal <= availableSkeletalAges.first) {
      x1_sa_dec = availableSkeletalAges.first;
      x2_sa_dec = availableSkeletalAges.elementAt(1);
    } else if (skeletalAgeDecimal >= availableSkeletalAges.last) {
      x1_sa_dec = availableSkeletalAges.elementAt(availableSkeletalAges.length - 2);
      x2_sa_dec = availableSkeletalAges.last;
    } else {
      double? foundX1, foundX2;
      for (int i = 0; i < availableSkeletalAges.length - 1; i++) {
        if (skeletalAgeDecimal >= availableSkeletalAges.elementAt(i) &&
            skeletalAgeDecimal < availableSkeletalAges.elementAt(i + 1)) {
          foundX1 = availableSkeletalAges.elementAt(i);
          foundX2 = availableSkeletalAges.elementAt(i + 1);
          break;
        }
      }
      if (foundX1 == null || foundX2 == null) {
        print('Error: Could not find suitable skeletal age interpolation range.');
        return null;
      }
      x1_sa_dec = foundX1;
      x2_sa_dec = foundX2;
    }

    // Find the original string keys corresponding to x1_sa_dec and x2_sa_dec
    x1_sa_str = tableData.first.estimatedFinalHeightsBySkeletalAge.keys.firstWhere(
            (key) => _calculateDecimalSkeletalAge(key) == x1_sa_dec,
        orElse: () => ''
    );
    x2_sa_str = tableData.first.estimatedFinalHeightsBySkeletalAge.keys.firstWhere(
            (key) => _calculateDecimalSkeletalAge(key) == x2_sa_dec,
        orElse: () => ''
    );

    if (x1_sa_str.isEmpty || x2_sa_str.isEmpty) {
      print('Error: Could not find matching skeletal age strings for interpolation boundaries.');
      return null;
    }

    // --- Step 2: Find the bounding current heights (Y-axis) ---
    final List<int> availableCurrentHeights = tableData.map((row) => row.childCurrentHeightInches).toList()..sort();

    if (availableCurrentHeights.length < 2) {
      print('Error: Not enough current height data points for interpolation in selected table.');
      return null;
    }

    int y1_ch, y2_ch; // Child current heights for interpolation points
    ChildGrowthDataRow? row1, row2; // Corresponding data rows

    // Determine the current height bounds
    if (childCurrentHeightInches <= availableCurrentHeights.first) {
      y1_ch = availableCurrentHeights.first;
      y2_ch = availableCurrentHeights.elementAt(1);
    } else if (childCurrentHeightInches >= availableCurrentHeights.last) {
      y1_ch = availableCurrentHeights.elementAt(availableCurrentHeights.length - 2);
      y2_ch = availableCurrentHeights.last;
    } else {
      int? foundY1, foundY2;
      for (int i = 0; i < availableCurrentHeights.length - 1; i++) {
        if (childCurrentHeightInches >= availableCurrentHeights.elementAt(i) &&
            childCurrentHeightInches < availableCurrentHeights.elementAt(i + 1)) {
          foundY1 = availableCurrentHeights.elementAt(i);
          foundY2 = availableCurrentHeights.elementAt(i + 1);
          break;
        }
      }
      if (foundY1 == null || foundY2 == null) {
        print('Error: Could not find suitable current height interpolation range.');
        return null;
      }
      y1_ch = foundY1;
      y2_ch = foundY2;
    }

    row1 = tableData.firstWhere((row) => row.childCurrentHeightInches == y1_ch);
    row2 = tableData.firstWhere((row) => row.childCurrentHeightInches == y2_ch);

    // --- Step 3: Get the four corner values (Estimated Final Heights) ---
    final double f_x1y1 = row1.estimatedFinalHeightsBySkeletalAge[x1_sa_str] ?? double.nan;
    final double f_x2y1 = row1.estimatedFinalHeightsBySkeletalAge[x2_sa_str] ?? double.nan;
    final double f_x1y2 = row2.estimatedFinalHeightsBySkeletalAge[x1_sa_str] ?? double.nan;
    final double f_x2y2 = row2.estimatedFinalHeightsBySkeletalAge[x2_sa_str] ?? double.nan;

    if (f_x1y1.isNaN || f_x2y1.isNaN || f_x1y2.isNaN || f_x2y2.isNaN) {
      print('Error: Missing data points for one or more corners of interpolation grid (values are NaN).');
      return null;
    }

    // --- Step 4: Perform Bilinear Interpolation ---

    // Interpolate along the skeletal age (X) axis for both current heights
    final double interp1 = _linearInterpolation(skeletalAgeDecimal, x1_sa_dec, f_x1y1, x2_sa_dec, f_x2y1);
    final double interp2 = _linearInterpolation(skeletalAgeDecimal, x1_sa_dec, f_x1y2, x2_sa_dec, f_x2y2);

    // Interpolate along the current height (Y) axis
    final double predictedFinalHeightInches = _linearInterpolation(
      childCurrentHeightInches.toDouble(), y1_ch.toDouble(), interp1, y2_ch.toDouble(), interp2,
    );

    // Create and return the result object
    return PredictedFinalHeightData(
      childCurrentHeightInches: childCurrentHeightInches,
      childSkeletalAgeString: childSkeletalAgeStr,
      childActualAgeDecimalYears: childActualAgeDecimalYears,
      sex: sex,
      skeletalAgeDifferenceCategory: category,
      skeletalAgeDecimalYears: skeletalAgeDecimal,
      childCurrentHeightCm: childCurrentHeightInches * inchesToCm,
      predictedFinalHeightInches: predictedFinalHeightInches,
      predictedFinalHeightCm: predictedFinalHeightInches * inchesToCm,
    );
  }

  /// Internal method to set up all growth data from provided raw CSV strings.
  /// This is now called from the constructor.
  void _setupAllGrowthData(Map<String, Map<String, String>> allRawCsvs) {
    allRawCsvs.forEach((sex, categoriesMap) {
      categoriesMap.forEach((category, csvString) {
        if (csvString.trim().isNotEmpty) {
          _ingestCsvData(sex, category, csvString);
        } else {
          print('Warning: Empty CSV string provided for Sex: $sex, Category: $category. Skipping.');
        }
      });
    });
  }
}

// Extension to easily find the first element matching a condition, or return null.
extension IterableExtension<T> on Iterable<T> {
  T? firstWhereOrNull(bool Function(T element) test) {
    for (var element in this) {
      if (test(element)) {
        return element;
      }
    }
    return null;
  }
}