name: Combined Release Deployment

# This workflow will run when a new GitHub Release is published.
# The `types: [published]` ensures it only runs after the release is fully created.
on:
  release:
    types: [published]

jobs:
  # Job for Android build and deployment
  build_and_deploy_android:
    runs-on: ubuntu-latest
    # Conditional logic:
    # Run this job if the release body does NOT contain '[IOS_ONLY]'
    # This means it will run by default, or if '[ANDROID_ONLY]' is present,
    # but it will skip if only '[IOS_ONLY]' is specified.
    if: "!contains(github.event.release.body, '[IOS_ONLY]')"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.32.4'
          channel: 'stable'

      - name: Get Flutter dependencies
        run: flutter pub get

      - name: Run Flutter tests (Android)
        run: flutter test

      - name: Extract version from pubspec.yaml and set build number (Android)
        id: get_version_android
        run: |
          VERSION_NAME=$(grep '^version:' pubspec.yaml | cut -d ' ' -f 2 | cut -d '+' -f 1)
          BUILD_NUMBER=$GITHUB_RUN_NUMBER
          
          echo "Detected Android Version Name: $VERSION_NAME"
          echo "Generated Android Build Number: $BUILD_NUMBER"

          echo "VERSION_NAME=$VERSION_NAME" >> $GITHUB_ENV
          echo "BUILD_NUMBER=$BUILD_NUMBER" >> $GITHUB_ENV

      - name: Decode Keystore and Create key.properties
        run: |
          mkdir -p android/keystore
          echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 --decode > android/keystore/eatyourpeas.jks
          echo "storePassword=${{ secrets.KEYSTORE_PASSWORD }}" > android/key.properties
          echo "keyPassword=${{ secrets.KEY_PASSWORD }}" >> android/key.properties
          echo "keyAlias=${{ secrets.KEY_ALIAS }}" >> android/key.properties
          echo "storeFile=$(pwd)/android/keystore/eatyourpeas.jks" >> android/key.properties
        env:
          KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}

      - name: Build Android App Bundle (AAB)
        run: |
          flutter build appbundle --release \
            --build-name=${{ env.VERSION_NAME }} \
            --build-number=${{ env.BUILD_NUMBER }}

      - name: Decode Google Play Service Account JSON
        run: |
          echo "${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT_JSON }}" | base64 --decode > google_play_api_key.json
        env:
          GOOGLE_PLAY_SERVICE_ACCOUNT_JSON: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT_JSON }}

      - name: Create Google Play Release Notes
        run: |
          RELEASE_NOTES_DIR="release-notes/en-US"
          mkdir -p $RELEASE_NOTES_DIR
          RELEASE_BODY="${{ github.event.release.body }}"
          
          if [ -z "$RELEASE_BODY" ]; then
            RELEASE_NOTES_CONTENT="- New features for version ${{ env.VERSION_NAME }}+${{ env.BUILD_NUMBER }}\n- Bug fixes and performance improvements."
          else
            RELEASE_NOTES_CONTENT="$RELEASE_BODY"
          fi
          echo -e "$RELEASE_NOTES_CONTENT" > "$RELEASE_NOTES_DIR/whatsnew.txt"
          echo "Android Release notes created at $RELEASE_NOTES_DIR/whatsnew.txt"
          cat "$RELEASE_NOTES_DIR/whatsnew.txt"

      - name: Upload to Google Play Store (Internal Test Track)
        uses: r0adkll/upload-google-play@v1.1.3
        with:
          serviceAccountJson: google_play_api_key.json
          packageName: ${{ secrets.ANDROID_PACKAGE_NAME }}
          releaseFiles: build/app/outputs/bundle/release/app-release.aab
          track: internal
          whatsNewDirectory: release-notes
          status: draft

  # Job for iOS build and deployment
  build_and_deploy_ios:
    runs-on: macos-latest
    # Conditional logic:
    # Run this job if the release body does NOT contain '[ANDROID_ONLY]'
    # This means it will run by default, or if '[IOS_ONLY]' is present,
    # but it will skip if only '[ANDROID_ONLY]' is specified.
    if: "!contains(github.event.release.body, '[ANDROID_ONLY]')"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # This step sets the desired Xcode version. Xcode 16 is required for iOS 18 SDK.
      - name: Select Xcode 16
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.4'

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.32.4'
          channel: 'stable'

      - name: Get Flutter dependencies
        run: flutter pub get

      - name: Run Flutter tests (iOS)
        run: flutter test

      - name: Extract version from pubspec.yaml and set build number (iOS)
        id: get_version_ios
        run: |
          VERSION_NAME=$(grep '^version:' pubspec.yaml | cut -d ' ' -f 2 | cut -d '+' -f 1)
          BUILD_NUMBER=$GITHUB_RUN_NUMBER
          
          echo "Detected iOS Version Name: $VERSION_NAME"
          echo "Generated iOS Build Number: $BUILD_NUMBER"

          echo "VERSION_NAME=$VERSION_NAME" >> $GITHUB_ENV
          echo "BUILD_NUMBER=$BUILD_NUMBER" >> $GITHUB_ENV

      - name: Install Apple Certificate
        uses: apple-actions/import-codesign-certs@v3
        with:
          p12-file-base64: ${{ secrets.IOS_CERTIFICATE_P12_BASE64 }}
          p12-password: ${{ secrets.IOS_CERTIFICATE_PASSWORD }}

      - name: Install Apple Provisioning Profile
        uses: apple-actions/download-provisioning-profiles@v4
        with:
          api-key-id: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
          issuer-id: ${{ secrets.APP_STORE_CONNECT_API_KEY_ISSUER_ID }}
          profile-type: IOS_APP_STORE
          api-private-key: ${{ secrets.APP_STORE_CONNECT_API_PRIVATE_KEY }}
          bundle-id: ${{ secrets.IOS_BUNDLE_ID }}

      # Step 1: Build the .xcarchive without code signing
      - name: Build iOS Archive (without signing)
        run: |
          # The --no-codesign flag tells Flutter to build the archive but skip the signing step.
          # This archive will then be explicitly signed in the next step using xcodebuild.
          flutter build ipa --release \
            --build-name=${{ env.VERSION_NAME }} \
            --build-number=${{ env.BUILD_NUMBER }} \
            --no-codesign
        # Ensure your project has 'Runner.xcworkspace' and 'Runner.xcscheme'

      # Step 2: Export the IPA from the archive with explicit signing
      - name: Export IPA from Archive
        id: export_ipa_step # Added ID to set output
        run: |
          # Find the generated .xcarchive file
          ARCHIVE_PATH=$(find build/ios/archive -name "*.xcarchive" -print -quit)
          
          if [ -z "$ARCHIVE_PATH" ]; then
            echo "Error: .xcarchive not found after flutter build."
            exit 1
          fi

          # Create a directory for the exported IPA
          mkdir -p build/ios/ipa

          # Use xcodebuild to export the IPA with explicit signing parameters.
          # This command respects the ExportOptions.plist and overrides project settings.
          xcodebuild -exportArchive \
            -archivePath "$ARCHIVE_PATH" \
            -exportOptionsPlist ./ios/ExportOptions.plist \
            -exportPath build/ios/ipa/

          # Find the actual .ipa file created in the build/ios/ipa/ directory
          IPA_FILE_PATH=$(find build/ios/ipa -name "*.ipa" -print -quit)

          if [ -z "$IPA_FILE_PATH" ]; then
            echo "Error: .ipa file not found after export. Check xcodebuild output."
            exit 1
          fi

          echo "::set-output name=ipa_path::$IPA_FILE_PATH" # Set output with the full IPA path

      - name: Create TestFlight Release Notes
        id: create_release_notes
        run: |
          RELEASE_BODY="${{ github.event.release.body }}"
          
          # Use EOF delimiter for multiline environment variables
          echo "RELEASE_NOTES_CONTENT<<EOF" >> $GITHUB_ENV
          if [ -z "$RELEASE_BODY" ]; then
            echo "- New features for version ${{ env.VERSION_NAME }}+${{ env.BUILD_NUMBER }}" >> $GITHUB_ENV
            echo "- Bug fixes and performance improvements." >> $GITHUB_ENV
          else
            echo "$RELEASE_BODY" >> $GITHUB_ENV
          fi
          echo "EOF" >> $GITHUB_ENV
          
          echo "TestFlight release notes prepared."

      - name: Upload to TestFlight
        uses: apple-actions/upload-testflight-build@v3
        with:
          # Use the exact IPA path from the previous step's output
          app-path: ${{ steps.export_ipa_step.outputs.ipa_path }}
          issuer-id: ${{ secrets.APP_STORE_CONNECT_API_KEY_ISSUER_ID }}
          api-key-id: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
          api-private-key: ${{ secrets.APP_STORE_CONNECT_API_PRIVATE_KEY }}
          # Removed 'build-notes' as it's not a supported input for v3 of this action.